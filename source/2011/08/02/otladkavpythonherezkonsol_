::id 4e37737b1d41c8451b000002
::date 2011-08-02
::title Отладка в python через консоль
::tags python, debug
::body
Запуск скрипта в отладчике
[[$ python -m pdb script.py]]
Либо можно прописать запуск отладчика в самом скрипте, для этого нужно добавить код[[import pdb
pdb.set_trace()]]

**Команды**
#|
||**h**elp|Список команд
||**l**ist|Отображение листинга, отображает точки останова - "B" в начале строки
||**l**ist s,e|Часть листинга: **s** - начальная строка, **e** - конечная строка
||**n**ext|Выполнить следующую команду текущего метода
||**s**tep|Выполнить следующую команду со входом внутрь методов
||**r**eturn|Выполнить текущий метод до конца
||**u**ntil|Выполнить до конца метода/цикла
||**a**rgs|Вывести список локальных переменных
||locals()|Отображение текущей области видимости (команда не отладчика)
||**q**uit|Выйти из отладчика
||**w**here|Определить текущее местоположение
||**u**p|Перемещение по стеку вверх
||**d**own|Перемещение по стеку вниз
||p //value//|Вывести на экран значение //(print)//
||pp //value//|Более красивый вывод на экран
||**!**//command//|Выполнить произвольную команду
||**j**ump|Перейти на строку (выполнить до строки)
||run [ 'script.py', 'a', 'b', 'c']|Перезапуск скрипта с параметрами
||alias //pl pp %1//|Создать алиас команды, %1 - входящий параметр
||unalias pl|Удаление алиаса
|#

**Точки останова**
#|
||break|Просмотр установленных т.о. и их номеров
||disable 1|Отключить т.о. по номеру
||enable 1|Включить т.о. по номеру
||break 15|Установить т.о. на указанной строке
||break foo|Установить т.о. на методе
||break ../script2.py:15|Установить т.о. в другом файле
||break 15, i>7|Установить т.о. с условием
||condition 1 i>0|Назначить условие на существующую т.о.
||tbreak 15|Временная т.о., удаляется при достижении
||continue|Продолжить выполнение скрипта
||clear|Удалить все т.о.
||clear 1|Удалить т.о. под номером 1
||ignore 1 10|Установка счетчика "не срабатывания", //для т.о. 1, пропустить 10 остановок//
||commands 1
...
end|Создать сценарий для т.о. 1
|#

Настройки по умолчанию можно сохранить в файле **~/.pdbrc** и **./.pdbrc** (последний переопределяет настройки первого)

::html
Запуск скрипта в отладчике<br />
<div class="codebox"><div class="highlight"><pre><span class="err">$</span> <span class="n">python</span> <span class="o">-</span><span class="n">m</span> <span class="n">pdb</span> <span class="n">script</span><span class="o">.</span><span class="n">py</span>
</pre></div>
</div><br />
Либо можно прописать запуск отладчика в самом скрипте, для этого нужно добавить код<div class="codebox"><div class="highlight"><pre><span class="kn">import</span> <span class="nn">pdb</span>
<span class="n">pdb</span><span class="o">.</span><span class="n">set_trace</span><span class="p">()</span>
</pre></div>
</div><br />
<br />
<b>Команды</b><br />
<table class="pymark_table"><tr><td></td></tr><tr><td><b>h</b>elp</td><td>Список команд</td></tr><tr><td><b>l</b>ist</td><td>Отображение листинга, отображает точки останова - "B" в начале строки</td></tr><tr><td><b>l</b>ist s,e</td><td>Часть листинга: <b>s</b> - начальная строка, <b>e</b> - конечная строка</td></tr><tr><td><b>n</b>ext</td><td>Выполнить следующую команду текущего метода</td></tr><tr><td><b>s</b>tep</td><td>Выполнить следующую команду со входом внутрь методов</td></tr><tr><td><b>r</b>eturn</td><td>Выполнить текущий метод до конца</td></tr><tr><td><b>u</b>ntil</td><td>Выполнить до конца метода/цикла</td></tr><tr><td><b>a</b>rgs</td><td>Вывести список локальных переменных</td></tr><tr><td>locals()</td><td>Отображение текущей области видимости (команда не отладчика)</td></tr><tr><td><b>q</b>uit</td><td>Выйти из отладчика</td></tr><tr><td><b>w</b>here</td><td>Определить текущее местоположение</td></tr><tr><td><b>u</b>p</td><td>Перемещение по стеку вверх</td></tr><tr><td><b>d</b>own</td><td>Перемещение по стеку вниз</td></tr><tr><td>p <i>value</i></td><td>Вывести на экран значение <i>(print)</i></td></tr><tr><td>pp <i>value</i></td><td>Более красивый вывод на экран</td></tr><tr><td><b>!</b><i>command</i></td><td>Выполнить произвольную команду</td></tr><tr><td><b>j</b>ump</td><td>Перейти на строку (выполнить до строки)</td></tr><tr><td>run [ 'script.py', 'a', 'b', 'c']</td><td>Перезапуск скрипта с параметрами</td></tr><tr><td>alias <i>pl pp %1</i></td><td>Создать алиас команды, %1 - входящий параметр</td></tr><tr><td>unalias pl</td><td>Удаление алиаса</td></tr></table><br />
<br />
<b>Точки останова</b><br />
<table class="pymark_table"><tr><td></td></tr><tr><td>break</td><td>Просмотр установленных т.о. и их номеров</td></tr><tr><td>disable 1</td><td>Отключить т.о. по номеру</td></tr><tr><td>enable 1</td><td>Включить т.о. по номеру</td></tr><tr><td>break 15</td><td>Установить т.о. на указанной строке</td></tr><tr><td>break foo</td><td>Установить т.о. на методе</td></tr><tr><td>break ../script2.py:15</td><td>Установить т.о. в другом файле</td></tr><tr><td>break 15, i&gt;7</td><td>Установить т.о. с условием</td></tr><tr><td>condition 1 i&gt;0</td><td>Назначить условие на существующую т.о.</td></tr><tr><td>tbreak 15</td><td>Временная т.о., удаляется при достижении</td></tr><tr><td>continue</td><td>Продолжить выполнение скрипта</td></tr><tr><td>clear</td><td>Удалить все т.о.</td></tr><tr><td>clear 1</td><td>Удалить т.о. под номером 1</td></tr><tr><td>ignore 1 10</td><td>Установка счетчика "не срабатывания", <i>для т.о. 1, пропустить 10 остановок</i></td></tr><tr><td>commands 1<br />
...<br />
end</td><td>Создать сценарий для т.о. 1</td></tr></table><br />
<br />
Настройки по умолчанию можно сохранить в файле <b>~/.pdbrc</b> и <b>./.pdbrc</b> (последний переопределяет настройки первого)<br />
