::id 4bfb3c691d41c846bc000081
::date 2010-03-17
::title Паттерны regexp
::tags regexp
::body
!Основные
**'.'** - (точка) - любой символ, если включить режим DOTALL то и перенос строки будет подходить под этот паттерн
**'^', '\A'** - Начало строки
**'$', '\Z'** - Конец строки


**'\w'** - буква
**'\W'** - не буква
**'\d'** - число
**'\D'** - не число
**'\s'** - символ пустоты (табулятор, пробел и т.п.)
**'\S'** - не символ пустоты
**[]** - указать диапазон символов, пример: //[a-zA-Z\s]//
**[^]** - противоположно предыдущему, указывает символы которые не должны попасться, пример: //[^a-z]//

!Указатели количества
**'*'** - 0 и более
**'+'** - 1 или более
**'?'** - 0 или 1
**{a,b}** - от a до b
**{a}** - кол-во = a

!Дополнительно
**(?=text)** - условие того что //text// присутствует, но курсор регепса не смещается т.е. дальнейший поиск начнется с той же позиции что и до текущего паттерна.
пример:
[[>>> print re.findall(r'\s(\w)\s',' a b c ') # обычное сравнение
['a', 'c']
>>> print re.findall(r'\s(\w)(?=\s)',' a b c ') # сравнение без сдвига курсора
['a', 'b', 'c'] ]]
**(?!text)** - аналогично предыдущему, но условие что текст не равен
**(?:a|b)** - условие того что текст равен **a** или **b**

см. [/page/63 regexp методы в python]

::html
<h3>Основные</h3><br />
<b>'.'</b> - (точка) - любой символ, если включить режим DOTALL то и перенос строки будет подходить под этот паттерн<br />
<b>'^', '\A'</b> - Начало строки<br />
<b>'$', '\Z'</b> - Конец строки<br />
<br />
<br />
<b>'\w'</b> - буква<br />
<b>'\W'</b> - не буква<br />
<b>'\d'</b> - число<br />
<b>'\D'</b> - не число<br />
<b>'\s'</b> - символ пустоты (табулятор, пробел и т.п.)<br />
<b>'\S'</b> - не символ пустоты<br />
<b>[]</b> - указать диапазон символов, пример: <i>[a-zA-Z\s]</i><br />
<b>[^]</b> - противоположно предыдущему, указывает символы которые не должны попасться, пример: <i>[^a-z]</i><br />
<h3>Указатели количества</h3><br />
<b>'*'</b> - 0 и более<br />
<b>'+'</b> - 1 или более<br />
<b>'?'</b> - 0 или 1<br />
<b>{a,b}</b> - от a до b<br />
<b>{a}</b> - кол-во = a<br />
<h3>Дополнительно</h3><br />
<b>(?=text)</b> - условие того что <i>text</i> присутствует, но курсор регепса не смещается т.е. дальнейший поиск начнется с той же позиции что и до текущего паттерна.<br />
пример:<br />
<div class="codebox"><pre><code>&gt;&gt;&gt; print re.findall(r'\s(\w)\s',' a b c ') # обычное сравнение
['a', 'c']
&gt;&gt;&gt; print re.findall(r'\s(\w)(?=\s)',' a b c ') # сравнение без сдвига курсора
['a', 'b', 'c'] </code></pre></div><br />
<b>(?!text)</b> - аналогично предыдущему, но условие что текст не равен<br />
<b>(?:a|b)</b> - условие того что текст равен <b>a</b> или <b>b</b><br />
<br />
см. <a href="/page/63">regexp методы в python</a><br />
