::id 4bfb3c691d41c846bc00007c
::date 2010-02-28
::title Mercurial (hg), основы
::tags mercurial, hg
::body
[image:%id%/mercurial.png]**Mercurial** - кроссплатформенная распределённая система управления версиями, разработанная для эффективной работы с очень большими репозиториями кода.


!Основные команды
Создание репозитария
[[hg init projlocal]]
Создание локальной копии репозитария
[[hg clone https://user@bitbucket.org/user/proj proj]]
Клонирование локального репозитария
[[hg clone proj proj2]]
Теперь можно работать и в proj и в proj2, для репозитария proj2 партерским будет proj, а для proj - https://user@bitbucket.org/user/proj

Узнать текущую ревизию (и родительские ревизии если текущая не слита) можно командой
[[hg tip]]
Суммарная информация о рабочей директории
[[hg summary]]
Наличие (двух) разошедшихся веток можно посмотреть командой
[[hg heads]]
Допустим мы находимся сейчас в proj2, и нужно узнать нет ли изменений от основного партнерского репозитария proj и для него:
[[hg incoming
hg outgoing]]
Состояние текущего репозитария
[[hg st
или hg status]]
Добавить файлы в репозитарий
[[hg add # добавляет все не версионные файлы
hg add some.file # выборочно ]]
Зафиксировать изменения в локальном репозитарии
[[hg ci -m "message"
или hg ci]]
Принять изменения от родителя (создает 2-ю ветку если текущий репозитарий изменялся)
[[hg pull]]
Отправить изменения родителю (создает 2-ю ветку у родителя если родитель изменялся)
[[hg push
или hg push repname]]**repname** - партнерский репозитарий, можно прописать в файле **.hg/hgrc**, раздел paths.


Что-б изменения появились в текущем репозитарии, после получения данных от партнерского репозитария, нужно выполнить
[[hg up
hg update]]
Слить 2 ветки
[[hg merge]]
Если появились коллизии, их нужно разрулить (например коллизии в файле file.name, мы его поправляем) и выполнить
[[hg resolve -m file.name]]флаг **-m** помечает файл как "разруленый"

**Получить diff (отличия)**
[[hg diff -r 123]]Выводит изменения прошедшие от релиза 123 до текущего.

!Игнорирование файлов
Для этого нужно в текущей папке создать файл **.hgignore**
[[# обычный синтаксис
syntax: glob
*.pyc
*~
# синтаксис регепсов
syntax: regexp
^\.pc/]]

!http сервер
Запуск http сервера на 8000 порту
[[hg serve -p 8000]]
Что-б делать push могли все нужно записать в файл **.hg/hgrc**
[[
[web]
push_ssl = false
allow_push = *]]

!Разное
Mercurial может работать с различными типами протоколов http, https, ssh
[[hg clone proj ssh://exemple.com/proj]]

::html
<a target="_blank" href="/uploads/4bfb3c691d41c846bc00007c/mercurial.png"><img class="content" src="/uploads/4bfb3c691d41c846bc00007c/mercurial.png" /></a><b>Mercurial</b> - кроссплатформенная распределённая система управления версиями, разработанная для эффективной работы с очень большими репозиториями кода.<br />
<br />
<h3>Основные команды</h3>Создание репозитария<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">init</span> <span class="n">projlocal</span>
</pre></div>
</div><br />
Создание локальной копии репозитария<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">clone</span> <span class="n">https</span><span class="p">:</span><span class="o">//</span><span class="n">user</span><span class="nd">@bitbucket.org</span><span class="o">/</span><span class="n">user</span><span class="o">/</span><span class="n">proj</span> <span class="n">proj</span>
</pre></div>
</div><br />
Клонирование локального репозитария<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">clone</span> <span class="n">proj</span> <span class="n">proj2</span>
</pre></div>
</div><br />
Теперь можно работать и в proj и в proj2, для репозитария proj2 партерским будет proj, а для proj - https://user@bitbucket.org/user/proj<br />
<br />
Узнать текущую ревизию (и родительские ревизии если текущая не слита) можно командой<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">tip</span>
</pre></div>
</div><br />
Суммарная информация о рабочей директории<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">summary</span>
</pre></div>
</div><br />
Наличие (двух) разошедшихся веток можно посмотреть командой<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">heads</span>
</pre></div>
</div><br />
Допустим мы находимся сейчас в proj2, и нужно узнать нет ли изменений от основного партнерского репозитария proj и для него:<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">incoming</span>
<span class="n">hg</span> <span class="n">outgoing</span>
</pre></div>
</div><br />
Состояние текущего репозитария<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">st</span>
<span class="err">или</span> <span class="n">hg</span> <span class="n">status</span>
</pre></div>
</div><br />
Добавить файлы в репозитарий<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">add</span> <span class="c"># добавляет все не версионные файлы</span>
<span class="n">hg</span> <span class="n">add</span> <span class="n">some</span><span class="o">.</span><span class="n">file</span> <span class="c"># выборочно </span>
</pre></div>
</div><br />
Зафиксировать изменения в локальном репозитарии<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">ci</span> <span class="o">-</span><span class="n">m</span> <span class="s">&quot;message&quot;</span>
<span class="err">или</span> <span class="n">hg</span> <span class="n">ci</span>
</pre></div>
</div><br />
Принять изменения от родителя (создает 2-ю ветку если текущий репозитарий изменялся)<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">pull</span>
</pre></div>
</div><br />
Отправить изменения родителю (создает 2-ю ветку у родителя если родитель изменялся)<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">push</span>
<span class="err">или</span> <span class="n">hg</span> <span class="n">push</span> <span class="n">repname</span>
</pre></div>
</div><b>repname</b> - партнерский репозитарий, можно прописать в файле <b>.hg/hgrc</b>, раздел paths.<br />
<br />
<br />
Что-б изменения появились в текущем репозитарии, после получения данных от партнерского репозитария, нужно выполнить<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">up</span>
<span class="n">hg</span> <span class="n">update</span>
</pre></div>
</div><br />
Слить 2 ветки<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">merge</span>
</pre></div>
</div><br />
Если появились коллизии, их нужно разрулить (например коллизии в файле file.name, мы его поправляем) и выполнить<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">resolve</span> <span class="o">-</span><span class="n">m</span> <span class="nb">file</span><span class="o">.</span><span class="n">name</span>
</pre></div>
</div>флаг <b>-m</b> помечает файл как "разруленый"<br />
<br />
<b>Получить diff (отличия)</b><br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">diff</span> <span class="o">-</span><span class="n">r</span> <span class="mi">123</span>
</pre></div>
</div>Выводит изменения прошедшие от релиза 123 до текущего.<br />
<h3>Игнорирование файлов</h3>Для этого нужно в текущей папке создать файл <b>.hgignore</b><br />
<div class="codebox"><div class="highlight"><pre><span class="c"># обычный синтаксис</span>
<span class="n">syntax</span><span class="p">:</span> <span class="n">glob</span>
<span class="o">*.</span><span class="n">pyc</span>
<span class="o">*~</span>
<span class="c"># синтаксис регепсов</span>
<span class="n">syntax</span><span class="p">:</span> <span class="n">regexp</span>
<span class="o">^</span>\<span class="o">.</span><span class="n">pc</span><span class="o">/</span>
</pre></div>
</div><br />
<h3>http сервер</h3>Запуск http сервера на 8000 порту<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">serve</span> <span class="o">-</span><span class="n">p</span> <span class="mi">8000</span>
</pre></div>
</div><br />
Что-б делать push могли все нужно записать в файл <b>.hg/hgrc</b><br />
<div class="codebox"><div class="highlight"><pre><span class="p">[</span><span class="n">web</span><span class="p">]</span>
<span class="n">push_ssl</span> <span class="o">=</span> <span class="n">false</span>
<span class="n">allow_push</span> <span class="o">=</span> <span class="o">*</span>
</pre></div>
</div><br />
<h3>Разное</h3>Mercurial может работать с различными типами протоколов http, https, ssh<br />
<div class="codebox"><div class="highlight"><pre><span class="n">hg</span> <span class="n">clone</span> <span class="n">proj</span> <span class="n">ssh</span><span class="p">:</span><span class="o">//</span><span class="n">exemple</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">proj</span>
</pre></div>
</div><br />
