<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">
    <link rel="icon" href="/static/icon.ico">

    <title>Metaclass python</title>

    <link rel="stylesheet" href="/static/bootstrap.min.css" type="text/css">
    <link rel="stylesheet" href="/static/main.css" type="text/css">

    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/html5shiv/3.7.3/html5shiv.min.js"></script>
      <script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>
    <![endif]-->
  </head>

  <body>
    <div class="container" style="height: 40px; margin-top: 20px;">
      <div class="pull-right">
        <table><tr>
          <td style="padding-right: 30px;">
            <a href="/"><h3>Home</h3></a>
          </td>
          <td>
            <a href="/tags/"><h3>Tags</h3></a>
          </td>
        </tr></table>
      </div>
    </div>
    <div class="container" style="margin-top: 40px;">

        <h1>Metaclass python</h1>
        <p>
            2011-06-25
            
                <a href="/tags/python">python</a>
            
                <a href="/tags/metaclass">metaclass</a>
            
        </p>
        <p class="lead">Класс позволяет создать экземпляры класса, метакласс позволяет контролировать создание класса и его экземпляры.<br />
Метакласс может являтся фабрикой классов.<br />
<i>Примеры для Python 2.7</i><br />
<h3>Рассмотрим методы создания класса:</h3>Создаем класс с типом <b>type</b>:<br />
<div class="codebox"><div class="highlight"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
</div><br />
Аналогично предыдущему:<br />
<div class="codebox"><div class="highlight"><pre><span class="n">B</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">,(</span><span class="nb">object</span><span class="p">,),{})</span>
</pre></div>
</div><br />
Аналогично предыдущему, но явно указываем тип <b>type</b><br />
<div class="codebox"><div class="highlight"><pre><span class="n">C</span> <span class="o">=</span> <span class="nb">type</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nb">object</span><span class="p">,),</span> <span class="p">{}</span> <span class="p">)</span>
</pre></div>
</div><br />
Создадим свой тип <b>Meta</b>, и сделаем с помощью его класс<br />
<div class="codebox"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Meta</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
    <span class="k">pass</span>
<span class="n">D</span> <span class="o">=</span> <span class="nb">type</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span> <span class="n">Meta</span> <span class="p">,</span> <span class="s">&#39;D&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nb">object</span><span class="p">,),</span> <span class="p">{}</span> <span class="p">)</span>
</pre></div>
</div><br />
Посмотрим типы наших классов:<br />
<div class="codebox"><div class="highlight"><pre><span class="k">class</span> <span class="nc">A</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">pass</span>
<span class="n">B</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;B&#39;</span><span class="p">,(</span><span class="nb">object</span><span class="p">,),{})</span>
<span class="n">C</span> <span class="o">=</span> <span class="nb">type</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="nb">type</span><span class="p">,</span> <span class="s">&#39;C&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nb">object</span><span class="p">,),</span> <span class="p">{}</span> <span class="p">)</span>

<span class="k">class</span> <span class="nc">Meta</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
    <span class="k">pass</span>
<span class="n">D</span> <span class="o">=</span> <span class="nb">type</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span> <span class="n">Meta</span> <span class="p">,</span> <span class="s">&#39;D&#39;</span><span class="p">,</span> <span class="p">(</span><span class="nb">object</span><span class="p">,),</span> <span class="p">{}</span> <span class="p">)</span>

<span class="k">print</span> <span class="n">A</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
<span class="k">print</span> <span class="n">B</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">B</span><span class="p">)</span>
<span class="k">print</span> <span class="n">C</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">C</span><span class="p">)</span>
<span class="k">print</span> <span class="n">D</span><span class="p">,</span> <span class="nb">type</span><span class="p">(</span><span class="n">D</span><span class="p">)</span>
</pre></div>
</div><b>Результат</b><div class="codebox"><div class="highlight"><pre><span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">A</span><span class="s">&#39;&gt; &lt;type &#39;</span><span class="nb">type</span><span class="s">&#39;&gt;</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">B</span><span class="s">&#39;&gt; &lt;type &#39;</span><span class="nb">type</span><span class="s">&#39;&gt;</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">C</span><span class="s">&#39;&gt; &lt;type &#39;</span><span class="nb">type</span><span class="s">&#39;&gt;</span>
<span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">D</span><span class="s">&#39;&gt; &lt;class &#39;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Meta</span><span class="s">&#39;&gt;</span>
</pre></div>
</div>Классы A, B, C имеют тип <b>type</b>, Класс D имеет тип <b>Meta</b>.<br />
<b>Meta</b> является метакласом, позволяет контролировать создание класса и его экземпляры.<br />
<h3>Создание экземпляра класса</h3><div class="codebox"><div class="highlight"><pre><span class="n">a</span> <span class="o">=</span> <span class="n">A</span><span class="p">()</span>
</pre></div>
</div><br />
Аналогично предыдущему:<br />
<div class="codebox"><div class="highlight"><pre><span class="n">a</span> <span class="o">=</span> <span class="nb">type</span><span class="o">.</span><span class="n">__call__</span><span class="p">(</span><span class="n">A</span><span class="p">)</span>
</pre></div>
</div><br />
<h3>Переопределение методов метакласса</h3>Как мы видим, у типа <b>type</b> есть 3 интересных метода:<br />
<b>type.__new__</b> (создание класса)<br />
<b>type.__init__</b> (инициализация класса)<br />
<b>type.__call__</b> (создание экземпляра),<br />
в нашем метаклассе <b>Meta</b> их можно переопределить, при этом в создаваемом классе нужно будет указать <b><u>metaclass</u></b><br />
<div class="codebox"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Meta</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">dic</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&#39;new:  </span><span class="si">%r</span><span class="s"> = </span><span class="si">%r</span><span class="s"> = </span><span class="si">%r</span><span class="s">&#39;</span> <span class="o">%</span> <span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">base</span><span class="p">)</span>
        <span class="k">return</span> <span class="nb">type</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">base</span><span class="p">,</span><span class="n">dic</span><span class="p">)</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&#39;init:&#39;</span><span class="p">,</span> <span class="n">cls</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">cls</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&#39;call:&#39;</span><span class="p">,</span> <span class="n">cls</span>
        <span class="k">return</span> <span class="nb">type</span><span class="p">(</span><span class="n">cls</span><span class="p">)</span>

<span class="k">print</span> <span class="s">&#39;Make class&#39;</span>
<span class="k">class</span> <span class="nc">Base</span><span class="p">():</span>
    <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">Meta</span>

<span class="k">class</span> <span class="nc">Foo</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="k">pass</span>

<span class="k">print</span> <span class="s">&#39;Make instance&#39;</span>
<span class="n">b</span> <span class="o">=</span> <span class="n">Base</span><span class="p">()</span>
<span class="n">f</span> <span class="o">=</span> <span class="n">Foo</span><span class="p">()</span>
</pre></div>
</div><b>Результат</b><div class="codebox"><div class="highlight"><pre><span class="n">Make</span> <span class="k">class</span>
<span class="nc">new</span><span class="p">:</span>  <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Meta</span><span class="s">&#39;&gt; = &#39;</span><span class="n">Base</span><span class="s">&#39; = ()</span>
<span class="n">init</span><span class="p">:</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Base</span><span class="s">&#39;&gt;</span>
<span class="n">new</span><span class="p">:</span>  <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Meta</span><span class="s">&#39;&gt; = &#39;</span><span class="n">Foo</span><span class="s">&#39; = (&lt;class &#39;</span><span class="n">__main__</span><span class="o">.</span><span class="n">Base</span><span class="s">&#39;&gt;,)</span>
<span class="n">init</span><span class="p">:</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Foo</span><span class="s">&#39;&gt;</span>
<span class="n">Make</span> <span class="n">instance</span>
<span class="n">call</span><span class="p">:</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Base</span><span class="s">&#39;&gt;</span>
<span class="n">call</span><span class="p">:</span> <span class="o">&lt;</span><span class="k">class</span> <span class="err">&#39;</span><span class="nc">__main__</span><span class="o">.</span><span class="n">Foo</span><span class="s">&#39;&gt;</span>
</pre></div>
</div>Метакласс передается по наследству, поэтому его в класс Foo не нужно указывать т.к. он отнаследован от Base.<br />
<h3>Примеры</h3>Расширение класса при создании<br />
<div class="codebox"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Car</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&#39;Car&#39;</span>
<span class="k">class</span> <span class="nc">Bus</span><span class="p">():</span>
    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&#39;Bus&#39;</span>

<span class="k">class</span> <span class="nc">Meta</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">base</span><span class="p">,</span> <span class="n">dic</span><span class="p">):</span>
        <span class="k">if</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">base</span><span class="p">)</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="nb">type</span><span class="p">(</span><span class="n">base</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">==</span> <span class="nb">str</span><span class="p">):</span>
            <span class="n">base</span> <span class="o">=</span> <span class="p">(</span> <span class="n">base</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="nb">globals</span><span class="p">()[</span><span class="n">base</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span> <span class="p">)</span>
        <span class="n">dic</span><span class="p">[</span><span class="s">&#39;color&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s">&#39;red&#39;</span>
        <span class="k">return</span> <span class="nb">type</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">base</span><span class="p">,</span><span class="n">dic</span><span class="p">)</span>

<span class="k">class</span> <span class="nc">Base</span><span class="p">():</span>
    <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">Meta</span>

<span class="k">class</span> <span class="nc">Machine</span><span class="p">(</span><span class="n">Base</span><span class="p">,</span><span class="s">&#39;Bus&#39;</span><span class="p">):</span>
    <span class="n">speed</span> <span class="o">=</span> <span class="mi">100</span>

<span class="n">m</span> <span class="o">=</span> <span class="n">Machine</span><span class="p">()</span>
<span class="n">m</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>
<span class="k">print</span> <span class="n">m</span><span class="o">.</span><span class="n">speed</span>
<span class="k">print</span> <span class="n">m</span><span class="o">.</span><span class="n">color</span>
</pre></div>
</div><b>Результат</b><div class="codebox"><div class="highlight"><pre><span class="n">Bus</span>
<span class="mi">100</span>
<span class="n">red</span>
</pre></div>
</div><br />
<br />
Расширение класса при создании экземпляра<br />
<div class="codebox"><div class="highlight"><pre><span class="k">class</span> <span class="nc">Meta</span><span class="p">(</span><span class="nb">type</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="n">cls</span><span class="p">,</span> <span class="n">arg</span><span class="p">):</span>
        <span class="n">t</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span>               <span class="c"># Определяем тип параметра</span>
        <span class="n">t2</span> <span class="o">=</span> <span class="nb">type</span><span class="p">(</span><span class="s">&#39;t2&#39;</span><span class="p">,(</span><span class="n">cls</span><span class="p">,</span><span class="n">t</span><span class="p">),</span> <span class="p">{})</span> <span class="c"># Создаем класс на основе обрабатываемого класса и типа входящего параметра</span>
        <span class="n">i</span> <span class="o">=</span> <span class="n">t</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">t2</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>      <span class="c"># Создаем экземпляр типа входного параметра ( + инициализация типов int, str...)</span>
        <span class="n">t</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="n">arg</span><span class="p">)</span>          <span class="c"># Инициализация</span>
        <span class="k">return</span> <span class="n">i</span>

<span class="k">class</span> <span class="nc">Base</span><span class="p">():</span>
    <span class="n">__metaclass__</span> <span class="o">=</span> <span class="n">Meta</span>

<span class="k">class</span> <span class="nc">Combine</span><span class="p">(</span><span class="n">Base</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">name</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">print</span> <span class="s">&#39;Combine</span><span class="se">\n</span><span class="s">&#39;</span>

<span class="n">a</span> <span class="o">=</span> <span class="n">Combine</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span>
<span class="k">print</span> <span class="n">a</span>
<span class="n">a</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>

<span class="n">b</span> <span class="o">=</span> <span class="n">Combine</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">])</span>
<span class="k">print</span> <span class="n">b</span>
<span class="n">b</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>

<span class="n">c</span> <span class="o">=</span> <span class="n">Combine</span><span class="p">({</span> <span class="s">&#39;id&#39;</span><span class="p">:</span><span class="s">&#39;hello&#39;</span> <span class="p">})</span>
<span class="k">print</span> <span class="n">c</span>
<span class="n">c</span><span class="o">.</span><span class="n">name</span><span class="p">()</span>
</pre></div>
</div><b>Результат</b><div class="codebox"><div class="highlight"><pre><span class="mi">10</span>
<span class="n">Combine</span>

<span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span>
<span class="n">Combine</span>

<span class="p">{</span><span class="s">&#39;id&#39;</span><span class="p">:</span> <span class="s">&#39;hello&#39;</span><span class="p">}</span>
<span class="n">Combine</span>
</pre></div>
</div><br /></p>

        <div style="margin-top: 50px; margin-bottom: 50px;">
            <div id="disqus_thread"></div>
            <script type="text/javascript">
                /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
                var disqus_shortname = 'pythonblog'; // required: replace example with your forum shortname

                /* * * DON'T EDIT BELOW THIS LINE * * */
                (function() {
                    var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
                    dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
                    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
                })();
            </script>
            <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
            <a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a>
        </div>

    </div>


<script type="text/javascript">
  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-2434245-2']);
  _gaq.push(['_trackPageview']);
  _gaq.push(['_trackPageLoadTime']);
  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

<!-- Yandex.Metrika counter -->
<script type="text/javascript">
(function (d, w, c) {
    (w[c] = w[c] || []).push(function() {
        try {
            w.yaCounter18005740 = new Ya.Metrika({id:18005740, enableAll: true});
        } catch(e) { }
    });
    
    var n = d.getElementsByTagName("script")[0],
        s = d.createElement("script"),
        f = function () { n.parentNode.insertBefore(s, n); };
    s.type = "text/javascript";
    s.async = true;
    s.src = (d.location.protocol == "https:" ? "https:" : "http:") + "//mc.yandex.ru/metrika/watch.js";

    if (w.opera == "[object Opera]") {
        d.addEventListener("DOMContentLoaded", f, false);
    } else { f(); }
})(document, window, "yandex_metrika_callbacks");
</script>
<noscript><div><img src="//mc.yandex.ru/watch/18005740" style="position:absolute; left:-9999px;" alt="" /></div></noscript>
<!-- /Yandex.Metrika counter -->

  </body>
</html>